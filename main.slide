Example Distributed System
with Go and NATS
21 Dec 2016

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Revision History
- 20151230-0001 Herber the HeartBeatListener now has a cool d3 visualisation.
- 20151224-1531 Modify NRS to also list connections (Tx/Rx).
- 20151223-2146 TODO: File Mover worker.
- 20151223-2120 Extensible Manager. Let the Math Experts / Workers listen in directly to the Math Problems endpoint. Now getting sub-millisecond response.
- 20151223-1217 Extensible Manager. Let's create a MathSolver -- Marsha.
- 20151222-0916 Refactor common code like send heartbeat and get ID to cfg package.
- 20151222-0126 HeartBeatListener -- added in-memory DB (map).
- 20151221-1556 Manager to-do list. Provide persistence of incoming jobs. Tried gob encoding with bolt-db. Could not get it to work. Went back to json.
- 20151221-1336 Manager -- let him listen to the Stable Files Pool and act on it. FileInfo must be deep copied into the message struct.
- 20161221-1042 File Watcher -- but we need to learn about package names first. Decided to put the system configuration in a Go package rather than a YAML file because of Go's checking of constants.
- 20161221-1040 Serial Number (ID) Generator
- 20161221-1000 Name, Rank and Serial Number (ID)

* Essential Infrastructure
: ------------------------------------------------------------

* First start NATS
start_nats.sh:
.play start_nats.sh
NATS is the message or event bus.

Tip: Start these essential services in separate terminals to facilitate development.

* Get your IDs here at the ID Office
ido/main.go:
.play -edit ido/main.go /010/,/020/
This is a critical service which many other services depend on. New services cannot start if they do not get an ID. However this service is stateless and you can spin up multiple copies with no ill effects.

A process manager like Kubernetes or Mesos may be useful in managing these services.

* System Services
: --------------------------------------------------------

* Manager Mun
mgr/mun.go:
.code mgr/mun.go /010/,/020/
.play -edit mgr/mun.go /050/,/060/
This manager shares his configuration package (mgr/mun) with workers that report to him.
.code mgr/mun.go /030/,/040/

* File Watcher
fw/main.go:
.code fw/main.go /010/,/020/
.play -edit fw/main.go /030/,/040/


* FileMover worker
fmvr/main.go:
.play fmvr/main.go /010/,/020/

: --------------------------------------------------------


* Manager MathSolver Marsha
msolv/main.go:
.play msolv/main.go /010/,/020/
Marsha posts the problem to the math solvers group and checks back periodically for answers. If there is no answer after some time, or if there are two or more answers which disagree, Marsha asks a higher authority for help.

* Math Expert: MathExpert1
mexp/main.go:
.play mexp/main.go /010/,/020/
Here is an "expert" who thinks the answer to everything is "42".

: --------------------------------------------------------

* Name, Rank and Serial Number
nrs/main.go:
.play -edit nrs/main.go /010/,/020/
All agents _should_ have a heartbeat so that they are discoverable.


* Heart beat listener: Herbert
hbl/main.go:
.play -edit hbl/main.go /010/,/020/
Things that move have a leader. That leader, named Herbert, has a database.

The system moves, new services are added and removed frequently. This heart beat listener should write entries on what it sees into its notebook.
The database is an in-memory map. View the visualisation at:

  http://localhost:8082/


* System-wide configuration
: ----------------------------------------------------------
cfg/cfg.go:
.code cfg/cfg.go
